"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[183],{4644:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(4848),r=t(8453);const s={},o="Tap",c={id:"api-reference/tap",title:"Tap",description:"Recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur between the given interval and position. The eventData from the emitted event contains the property tapCount, which contains the amount of multi-taps being recognized.",source:"@site/../docs/api-reference/tap.md",sourceDirName:"api-reference",slug:"/api-reference/tap",permalink:"/mjolnir.js/docs/api-reference/tap",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/mjolnir.js/tree/master/docs/../docs/api-reference/tap.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Swipe",permalink:"/mjolnir.js/docs/api-reference/swipe"},next:{title:"Types",permalink:"/mjolnir.js/docs/api-reference/types"}},a={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Events",id:"events",level:2},{value:"Source",id:"source",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tap",children:"Tap"})}),"\n",(0,i.jsxs)(n.p,{children:["Recognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur between the given interval and position. The eventData from the emitted event contains the property ",(0,i.jsx)(n.code,{children:"tapCount"}),", which contains the amount of multi-taps being recognized."]}),"\n",(0,i.jsxs)(n.p,{children:["If an Tap recognizer has a failing requirement, it waits the interval time before emitting the event. This is because if you want to only trigger a doubletap, the recognizer needs to see if any other taps are coming in. Use ",(0,i.jsx)(n.a,{href:"/mjolnir.js/docs/api-reference/event-manager#recognize-gesture",children:"requireFailure"})," to distinguish single tap events from double tap."]}),"\n",(0,i.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import {EventManager, Tap} from 'mjolnir.js';\n\nconst eventManager = new EventManager({\n  // ...\n  recognizers: [\n    new Tap({event: 'doubletap', pointers: 2}),\n    [new Tap({event: 'singletap'}), null, 'doubletap']\n  ]\n});\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," (object, optional) - Options","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event"})," (string) - Name of the event. Default ",(0,i.jsx)(n.code,{children:"'tap'"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pointers"})," (number) - Required pointers. Default ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"taps"})," (number) - Amount of taps required. Default ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"interval"})," (number) - Maximum time in ms between multiple taps. Default ",(0,i.jsx)(n.code,{children:"300"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"time"})," (number) - Maximum press time in ms. Default ",(0,i.jsx)(n.code,{children:"250"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," (number) - While doing a tap some small movement is allowed. Default ",(0,i.jsx)(n.code,{children:"2"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"posThreshold"})," (number) - The maximum position difference between multiple taps. Default ",(0,i.jsx)(n.code,{children:"10"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"tap"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/visgl/mjolnir.js/blob/master/src/hammerjs/recognizers/tap.ts",children:"https://github.com/visgl/mjolnir.js/blob/master/src/hammerjs/recognizers/tap.ts"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);