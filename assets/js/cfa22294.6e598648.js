"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[6],{5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},g="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),g=c(t),u=o,d=g["".concat(p,".").concat(u)]||g[u]||s[u]||a;return t?r.createElement(d,i(i({ref:n},m),{},{components:t})):r.createElement(d,i({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3444:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(8168),o=(t(6540),t(5680));const a={},i="Upgrade Guide",l={unversionedId:"upgrade-guide",id:"upgrade-guide",title:"Upgrade Guide",description:"From 2.x to 3.0",source:"@site/../docs/upgrade-guide.md",sourceDirName:".",slug:"/upgrade-guide",permalink:"/mjolnir.js/docs/upgrade-guide",draft:!1,editUrl:"https://github.com/visgl/mjolnir.js/tree/master/website/../docs/upgrade-guide.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"What's New",permalink:"/mjolnir.js/docs/whats-new"},next:{title:"EventManager",permalink:"/mjolnir.js/docs/api-reference/event-manager"}},p={},c=[{value:"From 2.x to 3.0",id:"from-2x-to-30",level:2},{value:"From 1.x to 2.0",id:"from-1x-to-20",level:2}],m={toc:c},g="wrapper";function s(e){let{components:n,...t}=e;return(0,o.yg)(g,(0,r.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"upgrade-guide"},"Upgrade Guide"),(0,o.yg)("h2",{id:"from-2x-to-30"},"From 2.x to 3.0"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"EventManager")," no longer comes with a default set of recognizers. Specify ",(0,o.yg)("inlineCode",{parentName:"li"},"options.recognizers")," to emit gesture events. "),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"EventManager"),"'s ",(0,o.yg)("inlineCode",{parentName:"li"},"recognizerOptions")," prop is removed."),(0,o.yg)("li",{parentName:"ul"},"Element must be supplied when constructing ",(0,o.yg)("inlineCode",{parentName:"li"},"EventManager")," and cannot be reassigned. To change the event target, destroy the existing event manager instance and construct a new one."),(0,o.yg)("li",{parentName:"ul"},"Hammer.js is no longer a dependency. Due to the lack of maintenance on the legacy hammerjs project, mjolnir.js has ported it to TypeScript and incorporated it into the code base. To configure recognizers (Pan, Pinch etc.), directly import them from ",(0,o.yg)("inlineCode",{parentName:"li"},"mjolnir.js"),". For details, see the documentation of each recognizer.")),(0,o.yg)("p",null,"Before:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="v2"',title:'"v2"'},"import Hammer from 'hammer.js';\nimport {EventManager} from 'mjolnir.js';\n\nnew EventManager(document.body, {\n  recognizers: [\n    [Hammer.Pan, {threshold: 4, direction: Hammer.DIRECTION_HORIZONTAL}],\n    [Hammer.Tap, {event: 'doubletap', pointers: 2}],\n    [Hammer.Tap, {event: 'singletap'}, null, 'doubletap']\n  ]\n});\n")),(0,o.yg)("p",null,"After:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="v3"',title:'"v3"'},"import {EventManager, Pan, Tap, InputDirection} from 'mjolnir.js';\n\nnew EventManager(document.body, {\n  recognizers: [\n    [Pan, {threshold: 4, direction: InputDirection.Horizontal}],\n    [Tap, {event: 'doubletap', pointers: 2}],\n    [Tap, {event: 'singletap'}, null, 'doubletap']\n  ]\n});\n")),(0,o.yg)("h2",{id:"from-1x-to-20"},"From 1.x to 2.0"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("inlineCode",{parentName:"li"},"legacyBlockScroll")," option to ",(0,o.yg)("inlineCode",{parentName:"li"},"EventManager")," is removed. Use ",(0,o.yg)("inlineCode",{parentName:"li"},"eventManager.on('wheel', evt => evt.preventDefault())")," to block scrolling."),(0,o.yg)("li",{parentName:"ul"},"The ",(0,o.yg)("inlineCode",{parentName:"li"},"rightButton")," option to ",(0,o.yg)("inlineCode",{parentName:"li"},"EventManager")," is removed. Use ",(0,o.yg)("inlineCode",{parentName:"li"},"eventManager.on('contextmenu', evt => evt.preventDefault())")," to enable right-button clicking and dragging.")))}s.isMDXComponent=!0}}]);