"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[321],{9680:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>j,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=i(4848),l=i(8453);const r={},s="Types",o={id:"api-reference/types",title:"Types",description:"InputDirection Enum",source:"@site/../docs/api-reference/types.md",sourceDirName:"api-reference",slug:"/api-reference/types",permalink:"/mjolnir.js/docs/api-reference/types",draft:!1,unlisted:!1,editUrl:"https://github.com/visgl/mjolnir.js/tree/master/docs/../docs/api-reference/types.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Tap",permalink:"/mjolnir.js/docs/api-reference/tap"}},d={},c=[{value:"InputDirection Enum",id:"inputdirection-enum",level:2},{value:"InputEvent Enum",id:"inputevent-enum",level:2},{value:"MjolnirEvent",id:"mjolnirevent",level:2},{value:"MjolnirPointerEvent",id:"mjolnirpointerevent",level:3},{value:"MjolnirGestureEvent",id:"mjolnirgestureevent",level:3},{value:"MjolnirWheelEvent",id:"mjolnirwheelevent",level:3},{value:"MjolnirKeyEvent",id:"mjolnirkeyevent",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"types",children:"Types"})}),"\n",(0,t.jsx)(n.h2,{id:"inputdirection-enum",children:"InputDirection Enum"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"None"}),"\n",(0,t.jsx)(n.li,{children:"Left"}),"\n",(0,t.jsx)(n.li,{children:"Right"}),"\n",(0,t.jsx)(n.li,{children:"Up"}),"\n",(0,t.jsx)(n.li,{children:"Down"}),"\n",(0,t.jsx)(n.li,{children:"Horizontal"}),"\n",(0,t.jsx)(n.li,{children:"Vertical"}),"\n",(0,t.jsx)(n.li,{children:"All"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"inputevent-enum",children:"InputEvent Enum"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start"}),"\n",(0,t.jsx)(n.li,{children:"Move"}),"\n",(0,t.jsx)(n.li,{children:"End"}),"\n",(0,t.jsx)(n.li,{children:"Cancel"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"mjolnirevent",children:"MjolnirEvent"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," (string) - The event type to which the event handler is subscribed, e.g. ",(0,t.jsx)(n.code,{children:"'click'"})," or ",(0,t.jsx)(n.code,{children:"'pointermove'"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"center"})," (Point) - The center of the event location (e.g. the centroid of a touch) relative to the browser's viewport (basically, ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX",children:(0,t.jsx)(n.code,{children:"clientX/Y"})}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offsetCenter"})," (Point) - The center of the event location (e.g. the centroid of a touch) relative to the root element"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target"})," (TargetElement) - The immediate target of the event, as specified by the original ",(0,t.jsx)(n.code,{children:"srcEvent"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rootElement"})," (HTMLElement) - The root element of the ",(0,t.jsx)(n.code,{children:"EventManager"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"srcEvent"})," (Event) - The original event object dispatched by the browser to the JS runtime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"preventDefault"})," (() => void) - Equivalent to ",(0,t.jsx)(n.code,{children:"srcEvent.preventDefault"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stopPropagation"})," (() => void) - Do not invoke handlers registered for any ancestors in the DOM tree."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stopImmediatePropagation"})," (() => void) - Do not invoke any other handlers registered for the same element or its ancestors."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mjolnirpointerevent",children:"MjolnirPointerEvent"}),"\n",(0,t.jsxs)(n.p,{children:["Emitted by ",(0,t.jsx)(n.code,{children:"pointer*"})," events. Extends ",(0,t.jsx)(n.code,{children:"MjolnirEvent"})," with the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leftButton"})," (boolean) - Flag indicating whether the left mouse button is involved during the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"middleButton"})," (boolean) - Flag indicating whether the middle mouse button is involved during the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rightButton"})," (boolean) - Flag indicating whether the right mouse button is involved during the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pointerType"})," (string) - A string indicating the type of input (e.g. ",(0,t.jsx)(n.code,{children:"'mouse'"}),", ",(0,t.jsx)(n.code,{children:"'touch'"}),", ",(0,t.jsx)(n.code,{children:"'pen'"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mjolnirgestureevent",children:"MjolnirGestureEvent"}),"\n",(0,t.jsxs)(n.p,{children:["Emitted by recognizers (",(0,t.jsx)(n.code,{children:"Pan"}),", ",(0,t.jsx)(n.code,{children:"Rotate"})," etc.). Extends ",(0,t.jsx)(n.code,{children:"MjolnirEvent"})," with the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eventType"})," (InputEvent) - type of this event (start, move, end) in the gesture lifecycle"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timeStamp"})," (number) - Timestamp of the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deltaTime"})," (number) - Total time since the first input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deltaX"})," (number) - Movement along the X axis"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deltaY"})," (number) - Movement along the Y axis"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"angle"})," (number) - Angle moved, in degrees"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"distance"})," (number) - Distance moved"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"scale"})," (number) - Scaling that has been done with multi-touch. 1 on a single touch."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rotation"})," (number) - Rotation (in degrees) that has been done with multi-touch. 0 on a single touch."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"direction"})," (InputDirection) - Direction moved."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offsetDirection"})," (InputDirection) - Direction moved from its starting point."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"velocity"})," (number) - Highest velocityX/Y value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"velocityX"})," (number) - Velocity along the X axis, in px/ms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"velocityY"})," (number) - Velocity along the Y axis, in px/ms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leftButton"})," (boolean) - Flag indicating whether the left mouse button is involved during the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"middleButton"})," (boolean) - Flag indicating whether the middle mouse button is involved during the event"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rightButton"})," (boolean) - Flag indicating whether the right mouse button is involved during the event"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mjolnirwheelevent",children:"MjolnirWheelEvent"}),"\n",(0,t.jsxs)(n.p,{children:["Emitted by the ",(0,t.jsx)(n.code,{children:"wheel"})," event. Extends ",(0,t.jsx)(n.code,{children:"MjolnirEvent"})," with the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"delta"})," (number) - The scroll magnitude/distance of a wheel event"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mjolnirkeyevent",children:"MjolnirKeyEvent"}),"\n",(0,t.jsxs)(n.p,{children:["Emitted by the ",(0,t.jsx)(n.code,{children:"key*"})," events. Extends ",(0,t.jsx)(n.code,{children:"MjolnirEvent"})," with the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"})," (string) - The ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values",children:"key value"})," associated with the keyboard event."]}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const l={},r=t.createContext(l);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);