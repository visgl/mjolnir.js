"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[321],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>s});var i=t(6540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=i.createContext({}),m=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=m(e.components);return i.createElement(p.Provider,{value:n},e.children)},g="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),g=m(t),d=l,s=g["".concat(p,".").concat(d)]||g[d]||y[d]||r;return t?i.createElement(s,a(a({ref:n},u),{},{components:t})):i.createElement(s,a({ref:n},u))}));function s(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,a=new Array(r);a[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[g]="string"==typeof e?e:l,a[1]=o;for(var m=2;m<r;m++)a[m]=t[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var i=t(8168),l=(t(6540),t(5680));const r={},a="Types",o={unversionedId:"api-reference/types",id:"api-reference/types",title:"Types",description:"InputDirection Enum",source:"@site/../docs/api-reference/types.md",sourceDirName:"api-reference",slug:"/api-reference/types",permalink:"/mjolnir.js/docs/api-reference/types",draft:!1,editUrl:"https://github.com/visgl/mjolnir.js/tree/master/website/../docs/api-reference/types.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Tap",permalink:"/mjolnir.js/docs/api-reference/tap"}},p={},m=[{value:"InputDirection Enum",id:"inputdirection-enum",level:2},{value:"InputEvent Enum",id:"inputevent-enum",level:2},{value:"MjolnirEvent",id:"mjolnirevent",level:2},{value:"MjolnirPointerEvent",id:"mjolnirpointerevent",level:3},{value:"MjolnirGestureEvent",id:"mjolnirgestureevent",level:3},{value:"MjolnirWheelEvent",id:"mjolnirwheelevent",level:3},{value:"MjolnirKeyEvent",id:"mjolnirkeyevent",level:3}],u={toc:m},g="wrapper";function y(e){let{components:n,...t}=e;return(0,l.yg)(g,(0,i.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"types"},"Types"),(0,l.yg)("h2",{id:"inputdirection-enum"},"InputDirection Enum"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"None"),(0,l.yg)("li",{parentName:"ul"},"Left"),(0,l.yg)("li",{parentName:"ul"},"Right"),(0,l.yg)("li",{parentName:"ul"},"Up"),(0,l.yg)("li",{parentName:"ul"},"Down"),(0,l.yg)("li",{parentName:"ul"},"Horizontal"),(0,l.yg)("li",{parentName:"ul"},"Vertical"),(0,l.yg)("li",{parentName:"ul"},"All")),(0,l.yg)("h2",{id:"inputevent-enum"},"InputEvent Enum"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Start"),(0,l.yg)("li",{parentName:"ul"},"Move"),(0,l.yg)("li",{parentName:"ul"},"End"),(0,l.yg)("li",{parentName:"ul"},"Cancel")),(0,l.yg)("h2",{id:"mjolnirevent"},"MjolnirEvent"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"type")," (string) - The event type to which the event handler is subscribed, e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"'click'")," or ",(0,l.yg)("inlineCode",{parentName:"li"},"'pointermove'")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"center")," (Point) - The center of the event location (e.g. the centroid of a touch) relative to the browser's viewport (basically, ",(0,l.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX"},(0,l.yg)("inlineCode",{parentName:"a"},"clientX/Y")),")"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"offsetCenter")," (Point) - The center of the event location (e.g. the centroid of a touch) relative to the root element"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"target")," (TargetElement) - The immediate target of the event, as specified by the original ",(0,l.yg)("inlineCode",{parentName:"li"},"srcEvent")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"rootElement")," (HTMLElement) - The root element of the ",(0,l.yg)("inlineCode",{parentName:"li"},"EventManager")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"srcEvent")," (Event) - The original event object dispatched by the browser to the JS runtime"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"preventDefault")," (() => void) - Equivalent to ",(0,l.yg)("inlineCode",{parentName:"li"},"srcEvent.preventDefault"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"stopPropagation")," (() => void) - Do not invoke handlers registered for any ancestors in the DOM tree."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"stopImmediatePropagation")," (() => void) - Do not invoke any other handlers registered for the same element or its ancestors.")),(0,l.yg)("h3",{id:"mjolnirpointerevent"},"MjolnirPointerEvent"),(0,l.yg)("p",null,"Emitted by ",(0,l.yg)("inlineCode",{parentName:"p"},"pointer*")," events. Extends ",(0,l.yg)("inlineCode",{parentName:"p"},"MjolnirEvent")," with the following fields:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"leftButton")," (boolean) - Flag indicating whether the left mouse button is involved during the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"middleButton")," (boolean) - Flag indicating whether the middle mouse button is involved during the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"rightButton")," (boolean) - Flag indicating whether the right mouse button is involved during the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"pointerType")," (string) - A string indicating the type of input (e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"'mouse'"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"'touch'"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"'pen'"),")")),(0,l.yg)("h3",{id:"mjolnirgestureevent"},"MjolnirGestureEvent"),(0,l.yg)("p",null,"Emitted by recognizers (",(0,l.yg)("inlineCode",{parentName:"p"},"Pan"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"Rotate")," etc.). Extends ",(0,l.yg)("inlineCode",{parentName:"p"},"MjolnirEvent")," with the following fields:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"eventType")," (InputEvent) - type of this event (start, move, end) in the gesture lifecycle"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"timeStamp")," (number) - Timestamp of the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"deltaTime")," (number) - Total time since the first input"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"deltaX")," (number) - Movement along the X axis"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"deltaY")," (number) - Movement along the Y axis"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"angle")," (number) - Angle moved, in degrees"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"distance")," (number) - Distance moved"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"scale")," (number) - Scaling that has been done with multi-touch. 1 on a single touch."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"rotation")," (number) - Rotation (in degrees) that has been done with multi-touch. 0 on a single touch."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"direction")," (InputDirection) - Direction moved."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"offsetDirection")," (InputDirection) - Direction moved from its starting point."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"velocity")," (number) - Highest velocityX/Y value."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"velocityX")," (number) - Velocity along the X axis, in px/ms"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"velocityY")," (number) - Velocity along the Y axis, in px/ms"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"leftButton")," (boolean) - Flag indicating whether the left mouse button is involved during the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"middleButton")," (boolean) - Flag indicating whether the middle mouse button is involved during the event"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"rightButton")," (boolean) - Flag indicating whether the right mouse button is involved during the event")),(0,l.yg)("h3",{id:"mjolnirwheelevent"},"MjolnirWheelEvent"),(0,l.yg)("p",null,"Emitted by the ",(0,l.yg)("inlineCode",{parentName:"p"},"wheel")," event. Extends ",(0,l.yg)("inlineCode",{parentName:"p"},"MjolnirEvent")," with the following fields:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"delta")," (number) - The scroll magnitude/distance of a wheel event")),(0,l.yg)("h3",{id:"mjolnirkeyevent"},"MjolnirKeyEvent"),(0,l.yg)("p",null,"Emitted by the ",(0,l.yg)("inlineCode",{parentName:"p"},"key*")," events. Extends ",(0,l.yg)("inlineCode",{parentName:"p"},"MjolnirEvent")," with the following fields:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"key")," (string) - The ",(0,l.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values"},"key value")," associated with the keyboard event.")))}y.isMDXComponent=!0}}]);